import React, { Component } from "react";
import PropTypes from "prop-types";
import { connect } from "react-redux";
import { logoutUser } from "../../actions/authActions";

// Imports Files
import FormAddClient from './FormAddClient'
import '../../App.css'
import {Chart} from 'primereact/chart'
import axios from 'axios'
import NavBar from './NavBar'

import { makeStyles } from '@material-ui/core/styles';
import Drawer from '@material-ui/core/Drawer';
import Button from '@material-ui/core/Button';
import List from '@material-ui/core/List';
import Divider from '@material-ui/core/Divider';
import ListItem from '@material-ui/core/ListItem';
import ListItemIcon from '@material-ui/core/ListItemIcon';
import ListItemText from '@material-ui/core/ListItemText';
import InboxIcon from '@material-ui/icons/MoveToInbox';
import MailIcon from '@material-ui/icons/Mail';

class Dashboard extends Component {
  constructor(props) {
    super(props);

    this.toggleNavbar = this.toggleNavbar.bind(this);
    this.state = {
      componentRender: <HomeDashboard />,
      collapsed: true
    }
  }

  toggleNavbar() {
    this.setState({
      collapsed: !this.state.collapsed
    });
  }

  onLogoutClick = e => {
    e.preventDefault();
    this.props.logoutUser();
  };

  onClickAddClient = e => {
    this.setState({ componentRender: <FormAddClient /> })
  }

  render() {
    const { user } = this.props.auth;

    return (
      <div>
        <NavBar />
        <HomeDashboard />
        
      </div>
    )
  }
}

class HomeDashboard extends Component {
  render() {
    return(
      <div className="Container">
          
      </div>
    )
  }
}

class PolarAreaChartDemo extends Component {
  constructor(props) {
    super(props)

    this.state = {
      cliente: [],
      PLG: '',
      CS: '',
      REF: ''
  }
  }

  componentDidMount() {
    this.data()
}

data() {
  axios.get('/api/clients')
  .then(response => {
      this.setState({ cliente: response.data });

      const plgFilter = this.state.cliente.filter(function(obj) {
          return obj.zona === 'PLG'
      })

      this.setState({ PLG: plgFilter.length });
      
      const refFilter = this.state.cliente.filter(function(obj) {
          return obj.zona === 'REF'
      }) 

      this.setState({ REF: refFilter.length });

      const csFilter = this.state.cliente.filter(function(obj) {
          return obj.zona === 'CS'
      }) 

      this.setState({ CS: csFilter.length });

  })
  .catch(function (error) {
      console.log(error)
  })
}

  render() {
      const data = {
          datasets: [{
              data: [this.state.PLG, this.state.CS, this.state.REF],
              backgroundColor: [
                  "#FF6384",
                  "#4BC0C0",
                  "#FFCE56"
              ],
              label: 'My dataset'
          }],
          labels: [
              "PLG",
              "CS",
              "REF"
          ]
      };

      return (
          <div>
              <div className="content-section implementation">
                  <Chart type="polarArea" data={data} />
              </div>
          </div>
      )
  }
}


function TemporaryDrawer() {
  
  const [state, setState] = React.useState({
    top: false,
    left: false,
    bottom: false,
    right: false,
  });

  const toggleDrawer = (side, open) => event => {
    if (event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {
      return;
    }

    setState({ ...state, [side]: open });
  };

  const sideList = side => (
    <div
      
      role="presentation"
      onClick={toggleDrawer(side, false)}
      onKeyDown={toggleDrawer(side, false)}
    >
      <List>
        {['Inbox', 'Starred', 'Send email', 'Drafts'].map((text, index) => (
          <ListItem button key={text}>
            <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>
            <ListItemText primary={text} />
          </ListItem>
        ))}
      </List>
      <Divider />
      <List>
        {['All mail', 'Trash', 'Spam'].map((text, index) => (
          <ListItem button key={text}>
            <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>
            <ListItemText primary={text} />
          </ListItem>
        ))}
      </List>
    </div>
  );

  const fullList = side => (
    <div
      
      role="presentation"
      onClick={toggleDrawer(side, false)}
      onKeyDown={toggleDrawer(side, false)}
    >
      <List>
        {['Inbox', 'Starred', 'Send email', 'Drafts'].map((text, index) => (
          <ListItem button key={text}>
            <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>
            <ListItemText primary={text} />
          </ListItem>
        ))}
      </List>
      <Divider />
      <List>
        {['All mail', 'Trash', 'Spam'].map((text, index) => (
          <ListItem button key={text}>
            <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>
            <ListItemText primary={text} />
          </ListItem>
        ))}
      </List>
    </div>
  );

  return (
    <div>
      <Button onClick={toggleDrawer('bottom', true)}>Open Bottom</Button>
      <Drawer anchor="bottom" open={state.bottom} onClose={toggleDrawer('bottom', false)}>
        {fullList('bottom')}
      </Drawer>
    </div>
  );
}

// Exports Defaults
Dashboard.propTypes = {
  logoutUser: PropTypes.func.isRequired,
  auth: PropTypes.object.isRequired
};

const mapStateToProps = state => ({
  auth: state.auth
});

export default connect(
  mapStateToProps,
  { logoutUser }
)(Dashboard);

////////////////////////////////////////////////////////////////////////////////////////////////

-- Solucionar el Problema con los datos repetidos de mongo 
-- Colocar Keyframes a los componentes al renderizarse por primera vez y al lanzar un error
-- Agregar mas datos al Dashboard y Barras